#!/bin/bash

echo "üîç === Diagn√≥stico CDC para Banking Demo ==="
echo

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para verificar status
check_status() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ OK${NC}"
    else
        echo -e "${RED}‚ùå ERRO${NC}"
    fi
}

# 1. Verificar containers
echo "1. üê≥ Verificando containers Docker..."
echo "   PostgreSQL Main:"
docker ps --format "{{.Names}}\t{{.Status}}" | grep banking-postgres > /dev/null
check_status

echo "   PostgreSQL Audit:"
docker ps --format "{{.Names}}\t{{.Status}}" | grep banking-audit-postgres > /dev/null
check_status

echo "   Kafka:"
docker ps --format "{{.Names}}\t{{.Status}}" | grep banking-kafka > /dev/null
check_status

echo "   Debezium Connect:"
docker ps --format "{{.Names}}\t{{.Status}}" | grep banking-debezium > /dev/null
check_status

echo "   Temporal:"
docker ps --format "{{.Names}}\t{{.Status}}" | grep banking-temporal > /dev/null
check_status

echo

# 2. Verificar conectividade dos servi√ßos
echo "2. üåê Verificando conectividade dos servi√ßos..."

echo "   Debezium Connect (8083):"
curl -s http://localhost:8083/ > /dev/null
check_status

echo "   Temporal Server (7233):"
curl -s http://localhost:7233/api/v1/namespaces > /dev/null
check_status

echo "   Kafka UI (8090):"
curl -s http://localhost:8090 > /dev/null
check_status

echo

# 3. Verificar microservi√ßos
echo "3. üöÄ Verificando microservi√ßos..."

services=("8081:Account" "8082:Transfer" "8085:Audit" "8086:Notification" "8087:Validation")
for service in "${services[@]}"; do
    port="${service%%:*}"
    name="${service##*:}"
    echo "   $name Service ($port):"
    curl -s http://localhost:$port/actuator/health > /dev/null
    check_status
done

echo

# 4. Verificar conector Debezium
echo "4. üîó Verificando conector Debezium..."
CONNECTOR_STATUS=$(curl -s http://localhost:8083/connectors/banking-connector/status 2>/dev/null)
if [ $? -eq 0 ] && echo "$CONNECTOR_STATUS" | jq -e '.connector.state == "RUNNING"' > /dev/null 2>&1; then
    echo -e "   Status: ${GREEN}‚úÖ RUNNING${NC}"
    TASKS=$(echo "$CONNECTOR_STATUS" | jq -r '.tasks[].state' 2>/dev/null)
    echo "   Tasks: $TASKS"
else
    echo -e "   Status: ${RED}‚ùå N√ÉO ENCONTRADO OU PARADO${NC}"
fi

echo

# 5. Verificar t√≥picos Kafka
echo "5. üì® Verificando t√≥picos Kafka..."
TOPICS=$(docker exec banking-kafka kafka-topics --bootstrap-server localhost:9092 --list 2>/dev/null | grep banking)
if [ -n "$TOPICS" ]; then
    echo -e "   ${GREEN}‚úÖ T√≥picos encontrados:${NC}"
    echo "$TOPICS" | sed 's/^/     - /'
else
    echo -e "   ${RED}‚ùå Nenhum t√≥pico banking encontrado${NC}"
fi

echo

# 6. Verificar publica√ß√£o PostgreSQL
echo "6. üìä Verificando configura√ß√£o PostgreSQL..."
PUB_CHECK=$(docker exec banking-postgres psql -U postgres -d banking_demo -t -c "SELECT count(*) FROM pg_publication WHERE pubname = 'dbz_publication';" 2>/dev/null | tr -d ' ')
if [ "$PUB_CHECK" = "1" ]; then
    echo -e "   Publica√ß√£o: ${GREEN}‚úÖ dbz_publication existe${NC}"
    # Verificar tabelas na publica√ß√£o
    TABLES=$(docker exec banking-postgres psql -U postgres -d banking_demo -t -c "SELECT tablename FROM pg_publication_tables WHERE pubname = 'dbz_publication';" 2>/dev/null | tr -d ' ' | tr '\n' ',' | sed 's/,$//')
    echo "     Tabelas: $TABLES"
else
    echo -e "   Publica√ß√£o: ${RED}‚ùå dbz_publication n√£o encontrada${NC}"
fi

SLOT_CHECK=$(docker exec banking-postgres psql -U postgres -d banking_demo -t -c "SELECT count(*) FROM pg_replication_slots WHERE slot_name = 'dbz_slot';" 2>/dev/null | tr -d ' ')
if [ "$SLOT_CHECK" = "1" ]; then
    echo -e "   Slot de replica√ß√£o: ${GREEN}‚úÖ dbz_slot existe${NC}"
    # Verificar se est√° ativo
    SLOT_ACTIVE=$(docker exec banking-postgres psql -U postgres -d banking_demo -t -c "SELECT active FROM pg_replication_slots WHERE slot_name = 'dbz_slot';" 2>/dev/null | tr -d ' ')
    echo "     Status: $SLOT_ACTIVE"
else
    echo -e "   Slot de replica√ß√£o: ${RED}‚ùå dbz_slot n√£o encontrado${NC}"
fi

# Verificar configura√ß√µes WAL
WAL_LEVEL=$(docker exec banking-postgres psql -U postgres -d banking_demo -t -c "SHOW wal_level;" 2>/dev/null | tr -d ' ')
echo "   WAL Level: $WAL_LEVEL"

echo

# 7. Resumo e recomenda√ß√µes
echo "7. üìã Resumo e Recomenda√ß√µes:"
echo
if [ "$PUB_CHECK" != "1" ] || [ "$SLOT_CHECK" != "1" ]; then
    echo -e "   ${YELLOW}‚ö†Ô∏è  Execute: ./scripts/setup-cdc-complete.sh${NC}"
fi

if [ -z "$TOPICS" ]; then
    echo -e "   ${YELLOW}‚ö†Ô∏è  T√≥picos Kafka n√£o encontrados. Verifique o conector Debezium.${NC}"
fi

echo -e "   ${GREEN}üí° Para testar o sistema completo: ./scripts/test-audit-cdc.sh${NC}"
echo -e "   ${GREEN}üí° Interfaces web:${NC}"
echo "     - Temporal UI: http://localhost:8088"
echo "     - Kafka UI: http://localhost:8090"

echo
echo "üèÅ === Fim do diagn√≥stico ==="